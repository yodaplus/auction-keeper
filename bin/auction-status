#!/usr/bin/env python3
# This file is part of Maker Keeper Framework.
#
# Copyright (C) 2018 bargst
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import decimal
from datetime import datetime

from babel.numbers import format_decimal
from texttable import Texttable
from web3 import Web3

from pymaker.deployment import DssDeployment
from pymaker.dss import Ilk, Collateral
from pymaker import Address, Wad

parser = argparse.ArgumentParser(prog='auction-keeper')
parser.add_argument("--rpc-host", type=str, default="localhost", help="JSON-RPC host (default: `localhost')")
parser.add_argument("--rpc-timeout", type=int, default=10, help="JSON-RPC timeout (in seconds, default: 10)")
parser.add_argument("--eth-from", type=str, help="Ethereum account from which to send transactions")
parser.add_argument("--json-from", type=str, help="JSON file containing dss deployment addresses")
arguments = parser.parse_args()

w3 = Web3(Web3.HTTPProvider(endpoint_uri=arguments.rpc_host,
                            request_kwargs={"timeout": arguments.rpc_timeout}))
w3.eth.defaultAccount = arguments.eth_from or w3.eth.accounts[0]
our_address = Address(w3.eth.defaultAccount)

## Default Kovan deployment
dss = """
    {
       "MCD_DEPLOY": "0xDb255f9481938127bFD55ea3F409140c0a22aa9D",
       "MCD_GOV": "0x6052632c8F977eDeF616A31D67Ce504Fb474BB77",
       "MCD_VAT": "0xCD726790550aFcd77e9a7a47e86A3F9010af126B",
       "MCD_PIT": "0xE7CF3198787C9A4daAc73371A38f29aAeECED87e",
       "MCD_DRIP": "0x891C04639a5edcaE088E546FA125B5d7FB6A2b9D",
       "MCD_CAT": "0x2F34f22a00eE4b7a8F8BBC4eAee1658774c624e0",
       "MCD_VOW": "0x3728e9777B2a0a611ee0F89e00E01044ce4736d1",
       "MCD_DAI": "0x444254706E8F1FB62a6EC26A7FA2b942ef672495",
       "MCD_JOIN_DAI": "0xfCbecd1A2AC11A260f6fF9De400F815F2906A2Bd",
       "MCD_MOVE_DAI": "0xC579CdF20dB327F4c191C7F25e0710e3d0c02195",
       "MCD_FLAP": "0x8868BAd8e74FcA4505676D1B5B21EcC23328d132",
       "MCD_FLOP": "0x6191C9b0086c2eBF92300cC507009b53996FbFFa",
       "MCD_MOM": "0x2D13FF37CdBcdB60b5C298B95B3E360BEC147e7E",
       "PIP_ETH": "0x9FfFE440258B79c5d6604001674A4722FfC0f7Bc",
       "MCD_JOIN_ETH": "0x3Ccd75157dc0Ec69141294eDa7a3657a4db8a399",
       "MCD_MOVE_ETH": "0xeFE0A31B90C3a81E18E329Dba100F96B7bC01860",
       "MCD_FLIP_ETH": "0x32D496Ad866D110060866B7125981C73642cc509",
       "MCD_SPOT_ETH": "0x0a787b0c65A6b4ffDE2C10c01eb4AC7409606533",
       "MCD_DAI_GUARD": "0x3ae1854375fFe3E4aba159529f19064E6940DFB7",
       "REP": "0x6FDc84f76093FA02facfB08844f5Fb240A08C1d6",
       "PIP_REP": "0xf88bBDc1E2718F8857F30A180076ec38d53cf296",
       "MCD_JOIN_REP": "0x5DF073FEb82b95Af2b3C90AE458201b997512ff7",
       "MCD_MOVE_REP": "0x32B9C412e8c0055Fb74f723B5b17c253f911d389",
       "MCD_FLIP_REP": "0xC0851F73CC8DD5c0765E71980eC7E7Fd1EF74434",
       "MCD_SPOT_REP": "0x6639d21C843eAAdF72c9eEC8108b6F6faE569490",
       "COLLATERALS": ["ETH", "REP"],
       "ETH": "0x0000000000000000000000000000000000000000"
    }
"""
if arguments.json_from:
    with open(arguments.json_from) as file:
        dss = file.read()
d = DssDeployment.from_json(web3=w3, conf=dss)


def format_amount(amount):
    if isinstance(amount, str) and amount == "":
        return format_decimal(0, format='#,##0.00', locale='en_US')
    try:
        return format_decimal(amount, format='#,##0.00', locale='en_US')
    except decimal.InvalidOperation:
        return '*error*'


def print_balances():
    def draw_table(table_data):
        table = Texttable(max_width=250)
        table.set_deco(Texttable.HEADER)
        table.set_cols_dtype(['t', 't', 't', 't', 't'])
        table.set_cols_align(['r', 'r', 'r', 'r', 'r'])
        table.set_cols_width([8, 12, 12, 12, 12])
        table.add_rows([["    name", "       ERC20", " Adapter/Vat", "         ink", "         art"]] + table_data)
        return table.draw()

    datas = []
    datas.append(["DAI",
                  format_amount(d.dai.balance_of(our_address)),
                  format_amount(d.vat.dai(our_address)),
                  "", ""])
    datas.append(["MKR", format_amount(d.mkr.balance_of(our_address)),
                  "", "", ""])
    datas.append(["ETH",
                  format_amount(Wad(w3.eth.getBalance(our_address.address))),
                  format_amount(d.vat.gem(Ilk('ETH'), our_address)),
                  format_amount(d.vat.urn(Ilk('ETH'), our_address).ink),
                  format_amount(d.vat.urn(Ilk('ETH'), our_address).art),
                  ])
    for c in [c for c in d.collaterals if c.ilk.name != 'ETH']:
        datas.append([c.ilk.name,
                      format_amount(c.gem.balance_of(our_address)),
                      format_amount(d.vat.gem(c.ilk, our_address)),
                      format_amount(d.vat.urn(c.ilk, our_address).ink),
                      format_amount(d.vat.urn(c.ilk, our_address).art),
                      ])
    return draw_table(datas)


def print_unsafe_cdp():
    def draw_table(table_data):
        table = Texttable(max_width=250)
        table.set_deco(Texttable.HEADER)
        table.set_cols_dtype(['t', 't', 't', 't'])
        table.set_cols_align(['c', 'r', 'r', 'r'])
        table.set_cols_width([6, 12, 12, 42])
        table.add_rows([["ilk", "ink", "tab", "guy"]] + table_data)
        return table.draw()

    last_frob_event = {}
    for frob_event in d.pit.past_frob(w3.eth.blockNumber):
        last_frob_event[frob_event.urn.address] = frob_event

    datas = []
    for urn_addr in last_frob_event:
        ilk = last_frob_event[urn_addr].ilk
        current_urn = d.vat.urn(ilk, urn_addr)
        safe = current_urn.ink * d.pit.spot(ilk) >= current_urn.art * d.vat.ilk(ilk.name).rate
        if not safe:
            datas.append([
                ilk.name,
                format_amount(current_urn.ink),
                format_amount(current_urn.art),
                current_urn.address,
            ])

    if datas:
        return draw_table(datas)
    else:
        return ' No unsfe CDP'


def print_flips():
    def draw_table(table_data):
        table = Texttable(max_width=250)
        table.set_deco(Texttable.HEADER)
        table.set_cols_dtype(['t', 't', 't', 't'])
        table.set_cols_align(['c', 'r', 'r', 'r'])
        table.set_cols_width([11, 6, 12, 12])
        table.add_rows([["Cat.Flip.id", "ilk", "ink", "tab"]] + table_data)
        return table.draw()

    datas = []
    for c in d.collaterals:
        for i in range(d.cat.nflip()):
            flip = d.cat.flips(i)
            if flip.tab > Wad(0):
                datas.append([
                    flip.id,
                    flip.urn.ilk.name,
                    format_amount(flip.urn.ink),
                    format_amount(flip.tab),
                ])

    if datas:
        return draw_table(datas)
    else:
        return ' No collateral auction pending'


def print_auctions(table_data):
    table = Texttable(max_width=250)
    table.set_deco(Texttable.HEADER)
    table.set_cols_dtype(['t', 't', 't', 't', 't', 't', 't', 't'])
    table.set_cols_align(['c', 'c', 'r', 'r', 'r', 'r', 'r', 'r'])
    table.set_cols_width([12, 4, 12, 12, 12, 33, 19, 42])
    table.add_rows([["name", "id", "bid", "lot", "tab", "tic", "end", "winner"]] + table_data)

    if table_data:
        return table.draw()
    else:
        return ' No auction in progress'


def fetch_auctions():
    auctions = []

    # Flippers Auctions
    for c in d.collaterals:
        for i in range(1, c.flipper.kicks() + 1):
            bid = c.flipper.bids(i)
            if bid.end > 0:
                auctions.append([
                    f"Flip[{c.ilk.name}]",
                    i,
                    format_amount(bid.bid),
                    format_amount(bid.lot),
                    format_amount(bid.tab),
                    f"{bid.tic}/{datetime.fromtimestamp(bid.tic)}",
                    datetime.fromtimestamp(bid.end),
                    bid.guy,
                ])
    # Flapper Auctions
    for i in range(1, d.flap.kicks() + 1):
        bid = d.flap.bids(i)
        if bid.end > 0:
            auctions.append([
                'Flap',
                i,
                format_amount(bid.bid),
                format_amount(bid.lot),
                "",
                f"{bid.tic}/{datetime.fromtimestamp(bid.tic)}",
                datetime.fromtimestamp(bid.end),
                bid.guy,
            ])

    # Flopper Auctions
    for i in range(1, d.flop.kicks() + 1):
        bid = d.flop.bids(i)
        if bid.end > 0:
            auctions.append([
                'Flop',
                i,
                format_amount(bid.bid),
                format_amount(bid.lot),
                "",
                f"{bid.tic}/{datetime.fromtimestamp(bid.tic)}",
                datetime.fromtimestamp(bid.end),
                bid.guy,
            ])

    return auctions


def print_auctions_parameters(table_data):
    table = Texttable(max_width=250)
    table.set_deco(Texttable.HEADER)
    table.set_cols_dtype(['t', 't', 't', 't'])
    table.set_cols_align(['l', 'c', 'c', 'r'])
    table.set_cols_width([12, 6, 6, 12])
    table.add_rows([["auction", "ttl", "tau", "min_size"]] + table_data)

    return table.draw()


def fetch_auction_parameters():
    params = []
    for c in d.collaterals:
        params.append([f"Flip[{c.ilk.name}]",
                       f"{c.flipper.ttl()/3600}h",
                       f"{c.flipper.tau()/3600}h",
                       format_amount(d.cat.lump(c.ilk)),
                       ])
    params.append([f"Flap",
                   f"{d.flap.ttl()/3600}h",
                   f"{d.flap.tau()/3600}h",
                   format_amount(d.vow.bump()),
                   ])
    params.append([f"Flop",
                   f"{d.flop.ttl()/3600}h",
                   f"{d.flop.tau()/3600}h",
                   format_amount(d.vow.sump()),
                   ])
    return params


def print_vow():
    def draw_table(table_data):
        table = Texttable(max_width=250)
        table.set_deco(Texttable.HEADER)
        table.set_cols_dtype(['t', 't', 't'])
        table.set_cols_align(['r', 'r', 'r'])
        table.set_cols_width([5, 22, 12])
        table.add_rows([["", "", "amount"]] + table_data)
        return table.draw()

    datas = []
    datas.append(["", "Sin=", format_amount(d.vow.sin())])
    datas.append(["", "Ash=", format_amount(d.vow.ash())])
    datas.append(["", "", ""])
    datas.append(["If", "Joy=", format_amount(d.vow.joy())])
    datas.append([">", "Sin+Woe+Ash+bump+hump=", format_amount(d.vow.awe() + d.vow.bump() + d.vow.hump())])
    datas.append(["then", "flap() when Woe=", 0])
    datas.append(["", "", ""])
    datas.append(["If", "Woe=", format_amount(d.vow.woe())])
    datas.append([">", "sump=", format_amount(d.vow.sump())])
    datas.append(["then", "flop() when Joy=", 0])
    datas.append(["", "", ""])
    return draw_table(datas)


def print_debt_queue():
    def draw_table(table_data):
        table = Texttable(max_width=250)
        table.set_deco(Texttable.HEADER)
        table.set_cols_dtype(['t', 't', 't', 't'])
        table.set_cols_align(['c', 'r', 'r', 'r'])
        table.set_cols_width([13, 19, 19, 12])
        table.add_rows([["era", "starting", "ending (flogable)", "amount"]] + table_data)
        return table.draw()

    datas = []
    for bite_event in d.cat.past_bite(100000):
        era = bite_event.era(w3)
        sin = d.vow.sin_of(era)
        if sin > Wad(0):
            datas.append([era,
                          datetime.fromtimestamp(era),
                          datetime.fromtimestamp(era + d.vow.wait()),
                          format_amount(sin)])

    if datas:
        return draw_table(datas)
    else:
        return ' No debt in queue'


print(f"\nBalances of {our_address}"
      f"\n{print_balances()}"
      f"\n\n"
      f"\nUnsafe CDPs:"
      f"\n{print_unsafe_cdp()}\n"
      f"\nAuctions in progress:"
      f"\n{print_flips()}\n"
      f"\n{print_auctions(fetch_auctions())}\n"
      f"\nAuctions parameters:"
      f"\n{print_auctions_parameters(fetch_auction_parameters())}\n"
      f"\n"
      f"\n Vow stats:"
      f"\n{print_vow()}"
      f"\nPending debt queue:"
      f"\n{print_debt_queue()}\n"
      f"Vow parameters: wait={d.vow.wait()/3600}h "
      f"bump={format_amount(d.vow.bump())} hump={format_amount(d.vow.hump())}\n")
